AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description : An AWS Serverless Application for Lambda HTTP Requests

Resources:

  ##############################
  ### Lamdba Layers ####
  ##############################

  PyODBCLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PyODBCLayer
      Description: PyODBC Library Dependency
      ContentUri: s3://tfgm-da-lamdba/layers/PyODBCLayer.zip
      #ContentUri:
      #    Bucket: !Ref LayerDeployBucket
      #    Key: !Ref LayerDeployKey
      CompatibleRuntimes:
              - python3.7

  RequestsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: RequestsLayer
      Description: RequestsLayer Library Dependency (https://github.com/keithrozario/Klayers)
      ContentUri: s3://tfgm-da-lamdba/layers/RequestsLayer.zip
      CompatibleRuntimes:
              - python3.6
              - python3.7

  ##############################
  ### Lamdba Functions ####
  ##############################

  ReadFromRDS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: read-from-rds-py
      Role: !GetAtt LambdaGetHttpsRequestRole.Arn
      CodeUri: AWSLambdaHttpRequest/
      Handler: app.read_from_rds
      Runtime: python3.7
      MemorySize: 1024
      Timeout: 60
      Layers:
        - !Ref PyODBCLayer
        - !Ref RequestsLayer
      Environment:
        Variables:
          env: dev

  GetOnsOaHttpRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-ons-oa-http-request-py
      Role: !GetAtt LambdaGetHttpsRequestRole.Arn
      CodeUri: AWSLambdaHttpRequest/
      Handler: app.get_ons_oa_http_request
      Runtime: python3.7
      MemorySize: 1024
      Timeout: 320
      Layers:
        - !Ref PyODBCLayer
        - !Ref RequestsLayer
      Environment:
        Variables:
          env: dev

  CheckJsonArrayForElements:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: check-json-array-for-elements-py
      Role: !GetAtt LambdaGetHttpsRequestRole.Arn
      CodeUri: AWSLambdaHttpRequest/
      Handler: app.check_json_array_for_elements
      Runtime: python3.7
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref PyODBCLayer
        - !Ref RequestsLayer

  GetFirstElementfromJsonArray:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-first-element-from-json-array-py
      Role: !GetAtt LambdaGetHttpsRequestRole.Arn
      CodeUri: AWSLambdaHttpRequest/
      Handler: app.get_first_element_from_json_array
      Runtime: python3.7
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref PyODBCLayer
        - !Ref RequestsLayer

  RemoveNextElementfromJsonArray:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: remove-next-element-from-json-array-py
      Role: !GetAtt LambdaGetHttpsRequestRole.Arn
      CodeUri: AWSLambdaHttpRequest/
      Handler: app.remove_next_element_from_json_array
      Runtime: python3.7
      MemorySize: 256
      Timeout: 60
      Layers:
        - !Ref PyODBCLayer
        - !Ref RequestsLayer

  SnowflakeValidate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: snowflake_validate-py
      Role: !GetAtt LambdaGetHttpsRequestRole.Arn
      CodeUri: AWSLambdaHttpRequest/
      Handler: app.snowflake_validate
      Runtime: python3.7
      MemorySize: 1024
      Timeout: 60
      Layers:
        - !Ref PyODBCLayer
        - !Ref RequestsLayer
      Environment:
        Variables:
          env: dev

  ##############################
  ### State Machines ####
  ##############################

  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: invoke-lamdba-get-http-request-py
      RoleArn: !GetAtt SegmentationStateMachineRole.Arn
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "Comment": "Will loop though array and invoke the app.get_http_request Lambda function on each iteration",
              "StartAt": "LambdaReadfromRDS",
              "States": {
                "LambdaReadfromRDS": {
                  "Type": "Task",
                  "Resource": "${ReadFromRDSArn}",
                  "ResultPath": "$.array-elements.elements",
                  "OutputPath": "$.array-elements",
                  "Next": "CheckJsonArrayForElements"
                },
                "CheckJsonArrayForElements": {
                  "Type": "Task",
                  "Resource": "${CheckJsonArrayForElementsArn}",
                  "ResultPath": "$.check-json-array-for-elements.has_elements",
                  "Next": "ProcessArrayElement"
                },
                "ProcessArrayElement": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.check-json-array-for-elements.has_elements",
                      "BooleanEquals": true,
                      "Next": "NotEmptyArray"
                    }
                  ],
                  "Default": "EmptyArray"
                },
                "NotEmptyArray": {
                  "Type": "Pass",
                  "ResultPath": "$.array-elements",
                  "OutputPath": "$.array-elements",
                  "Next": "GetFirstElementfromJsonArray"
                },
                "EmptyArray": {
                  "Type": "Pass",
                  "Result": "is Empty - End State Machine",
                  "End": true
                },
                "GetFirstElementfromJsonArray": {
                  "Type": "Task",
                  "Resource": "${GetFirstElementfromJsonArrayArn}",
                  "ResultPath": "$.attribute",
                  "Next": "GetOnsOaHttpRequest"
                },
                "GetOnsOaHttpRequest": {
                  "Type": "Task",
                  "Resource": "${GetOnsOaHttpRequestArn}",
                  "ResultPath": "$.array-elements.elements",
                  "OutputPath": "$.array-elements",
                  "Next": "RemoveNextElementfromJsonArray"
                },
                "RemoveNextElementfromJsonArray": {
                  "Type": "Task",
                  "Resource": "${RemoveNextElementfromJsonArrayArn}",
                  "ResultPath": "$.array-elements",
                  "OutputPath": "$.array-elements",
                  "Next": "CheckJsonArrayForElements"
                }
              }
            }
          -
            ReadFromRDSArn: !GetAtt [ ReadFromRDS, Arn ]
            GetOnsOaHttpRequestArn: !GetAtt [ GetOnsOaHttpRequest, Arn ]
            CheckJsonArrayForElementsArn: !GetAtt [ CheckJsonArrayForElements, Arn ]
            GetFirstElementfromJsonArrayArn: !GetAtt [ GetFirstElementfromJsonArray, Arn ]
            RemoveNextElementfromJsonArrayArn: !GetAtt [ RemoveNextElementfromJsonArray, Arn ]


  ##############################
  ### Policies and Roles ####
  ##############################

  LambdaGetHttpsRequestRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [!Ref "AWS::Region", "tfgm-da-lambda-get-https-request-py"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
      - PolicyName: SystemsManagerGetParameter
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
            - ssm:GetParameterHistory
            - ssm:GetParametersByPath
            - ssm:GetParameters
            - ssm:GetParameter
            Resource: "*"

  SegmentationStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [!Ref "AWS::Region", "tfgm-da-segmentation-state-machine-py"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
      - PolicyName: StepFunctionLambdaInvoke
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: "*"

  ### https://docs:snowflake:
  ###    net/manuals/user-guide/data-load-s3-config:
  ###      html#option-1-configuring-a-snowflake-storage-integration:

  SnowflakeS3StagePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "-", [!Ref "AWS::Region", "tfgm-da-snowflake-s3-stage-policy"] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObjectVersion"
            - "s3:DeleteObject"
            - "s3:GetObjectVersion"
          Resource:
            - "arn:aws:s3:::tfgm-da-segmentation-postcode-output-area/*"
            - "arn:aws:s3:::tfgm-da-segmentation-output-area-polygon/*"
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::tfgm-da-segmentation-postcode-output-area/*"
            - "arn:aws:s3:::tfgm-da-segmentation-output-area-polygon/*"
          Condition:
            StringLike:
              s3:prefix:
              - "*"

  #SnowflakeS3Role:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: !Join [ "-", [!Ref "AWS::Region", "tfgm-da-snowflake-s3-role"] ]
#      AssumeRolePolicyDocument:
        #Version: "2012-10-17"
        #Statement:
        #- Effect: Allow
        #  Principal:
        #    Service:
        #    - s3.amazonaws.com
        #  Action:
        #  - sts:AssumeRole
#        Version: '2012-10-17'
#        Statement:
#        - Sid: ''
#          Effect: Allow
#          Principal:
#            AWS: !Ref SnowflakeUserARN
#          Action: sts:AssumeRole
#          Condition:
#            StringEquals:
#              sts:ExternalId: !Ref SnowflakeExternalID
#      ManagedPolicyArns:
#        - !Ref SnowflakeS3StagePolicy



